{
    "modelData": {
        "filePath": "dlg-palettes/imager.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "",
        "repoService": "GitHub",
        "repoBranch": "main",
        "repo": "ICRAR/wallaby-hires",
        "eagleVersion": "v6.2.0:html-graph-renderer",
        "eagleCommitHash": "a1d68d87110d9cf6614ceb5e9f6b807ffad4498f",
        "schemaVersion": "Unknown",
        "readonly": false,
        "repositoryUrl": "",
        "commitHash": "",
        "downloadUrl": "",
        "signature": "",
        "lastModifiedName": "",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 0,
        "numLGNodes": 1
    },
    "nodeDataArray": [
        {
            "category": "ParameterSet",
            "categoryType": "Data",
            "key": -1,
            "name": "imager_complete_parset",
            "description": "Set of parameters for ASKAPSoft/YANDASoft imager.",
            "repositoryUrl": "https://github.com/ICRAR/daliuge",
            "commitHash": "b11f970",
            "paletteDownloadUrl": "https://raw.githubusercontent.com/ICRAR/EAGLE_test_repo/master/daliuge/daliuge-master.palette",
            "dataHash": "057c6a8ea53a5d04ce07c2e26ef25cfca59504053407289c5309f81cc44556fc",
            "fields": [
                {
                    "name": "data_volume",
                    "value": 5,
                    "defaultValue": "5",
                    "description": "Estimated size of the data contained in this node",
                    "readonly": false,
                    "type": "Float",
                    "precious": false,
                    "options": [],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "9868d92f-b5a0-48a1-808d-61fea5970331",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort"
                },
                {
                    "name": "group_end",
                    "value": false,
                    "defaultValue": "False",
                    "description": "Is this node the end of a group?",
                    "readonly": false,
                    "type": "Boolean",
                    "precious": false,
                    "options": [],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "a37d4785-f941-4a3c-94fc-4d5dbf51dae1",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort"
                },
                {
                    "name": "mode",
                    "value": "YANDA",
                    "defaultValue": "YANDA",
                    "description": "Serialisation method.",
                    "readonly": false,
                    "type": "Select",
                    "precious": false,
                    "options": [
                        "YANDA",
                        "ini",
                        "yaml",
                        "json",
                        "toml",
                        "pickle"
                    ],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "891df2ae-b058-4de4-9382-0f6c1e7a4aec",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort"
                },
                {
                    "name": "config_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional configuration information to be mixed in with the initial data",
                    "readonly": false,
                    "type": "String",
                    "precious": false,
                    "options": [],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "c4fc516c-1d25-4d13-a764-93d1a2a21d57",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort"
                },
                {
                    "name": "dropclass",
                    "value": "dlg.data.drops.parset_drop.ParameterSetDROP",
                    "defaultValue": "dlg.data.drops.parset_drop.ParameterSetDROP",
                    "description": "Drop class",
                    "readonly": false,
                    "type": "String",
                    "precious": false,
                    "options": [],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "bbb7260a-f5c4-447a-a6fd-ff06bbd83171",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort"
                },
                {
                    "name": "streaming",
                    "value": false,
                    "defaultValue": "False",
                    "description": "Specifies whether this data component streams input and output data",
                    "readonly": false,
                    "type": "Boolean",
                    "precious": false,
                    "options": [],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "c792ed4c-58dd-4a2b-8d35-6d7852fa661a",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort"
                },
                {
                    "name": "persist",
                    "value": false,
                    "defaultValue": "False",
                    "description": "Specifies whether this data component contains data that should not be deleted after execution",
                    "readonly": false,
                    "type": "Boolean",
                    "precious": false,
                    "options": [],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "5aca3239-f079-44e8-83d5-7589d3a8abbf",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort"
                },
                {
                    "name": "Config",
                    "value": "",
                    "defaultValue": "",
                    "description": "The output configuration file",
                    "readonly": false,
                    "type": "Object.File",
                    "precious": false,
                    "options": [],
                    "positional": false,
                    "keyAttribute": false,
                    "id": "be4158b4-a2ff-4c07-9f33-e7f183829a2d",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort"
                },
                {
                    "name": "Cimager.imagetype",
                    "type": "String",
                    "options": [],
                    "defaultValue": "casa",
                    "description": "Type of the image handler (determines the format of the images, both which are written to or read from the disk). The default is to create casa images but fits can also be chosen.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter1"
                },
                {
                    "name": "Cimager.imagealloc",
                    "type": "String",
                    "options": [],
                    "defaultValue": "fast",
                    "description": "Set to fast to use the fast file allocation scheme This can save a lot of time when creating large cubes. This is the default, use to turn off.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter2"
                },
                {
                    "name": "Cimager.dataset",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Measurement set file name to read from. Usual substitution rules apply if the parameter is a single string. If the parameter is given as a vector then the sets can be different frequencies of the same observation or different epochs",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter3"
                },
                {
                    "name": "Cimager.nworkergroups",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 1,
                    "description": "Number of worker groups. This option can only be used in the parallel mode. If it is greater than 1, the model parameters are distributed (as evenly as possible) between the given number of groups of workers (e.g. if one calculates a Taylor term expansion of the order of 1 for one image, setting this parameter to 3 will allow parallel computation of the Taylor terms for this image). This is on top of the normal parallelism within the group (the %w index spans from 0 to the number of workers per group - 1). Essentially, this option allows to throw several workers on the same problem if the model allows partitioning.Taylor terms, faceting and multiple images in the model are the typical use cases.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter4"
                },
                {
                    "name": "Cimager.nchanpercore",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 1,
                    "description": "Number of channels allocated to each worker core",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter5"
                },
                {
                    "name": "Cimager.combinechannels",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "When true combine all nchanpercore channels into a single grid before the FFT. Generally optimal for continuum (Taylor term) processing.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter6"
                },
                {
                    "name": "Cimager.Channels",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "[]",
                    "description": "Channels to be selected from the measurement set. Syntax is [<number>,<start>]. Defaults to all the channels",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter7"
                },
                {
                    "name": "Cimager.Frequencies",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "[]",
                    "description": "Dimensions of the output cube in freuency space Syntax is [<number>,<start>,<width] all in Hz. Defaults to the same as the input MS",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter8"
                },
                {
                    "name": "Cimager.beams",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "[0]",
                    "description": "Beam number to be selected from the measurement set",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter9"
                },
                {
                    "name": "Cimager.nwriters",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 1,
                    "description": "The number of output cubes to generate in spectral cube mode.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter10"
                },
                {
                    "name": "Cimager.freqframe",
                    "type": "String",
                    "options": [],
                    "defaultValue": "topo",
                    "description": "Generate output cubes in the given frame options are topocentric (topo), barycentric (bary) and kinematic local standard of rest (lsrk)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter11"
                },
                {
                    "name": "Cimager.dopplertracking",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "For use with bary and lsrk frame: track the change in frequency during the observation, selecting the nearest channel at each time. Note that by default this uses the field direction (antenna pointing) as direction reference, not the tangent point or beam pointing",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter12"
                },
                {
                    "name": "Cimager.dopplertracking.direction",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Specify the reference direction to use for the velocity calculations, e.g., [12:34:56.7,-23.45.56.7,J2000]",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter13"
                },
                {
                    "name": "Cimager.singleoutputfile",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Single output cube. Useful in the case of multiple writers",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter14"
                },
                {
                    "name": "Cimager.solverpercore",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Turn on distributed solver (spectral imaging) mode",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter15"
                },
                {
                    "name": "Cimager.updatedirection",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Turn on joint cleaning mode (see above). Note, due current limitations only the first file is used to construct the PSF. This is a viable approach if the data are split only by beam and can be misleading otherwise.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter16"
                },
                {
                    "name": "Cimager.datacolumn",
                    "type": "String",
                    "options": [],
                    "defaultValue": "DATA",
                    "description": "The name of the data column in the measurement set which will be the source of visibilities.This can be useful to process real telescope data which were passed throughcasapyat some stage (e.g. to image calibrated data which are stored in theCORRECTED_DATAcolumn). In the measurement set convention, theDATAcolumn which is used by default contains raw uncalibrated data as received directly from the telescope. Calibration tasks incasapymake a copy when calibration is applied creating a new data column.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter17"
                },
                {
                    "name": "Cimager.sphfuncforpsf",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the default spheroidal function gridder is used to compute PSF regardless of the gridder selected for model degridding and residual gridding. This has a potential to produce better behaving PSF by taking out two major factors of position dependence. Note, this doesn\u2019t make the PSF correct or otherwise,it is just a different approximation. Care must be taken when using this option with traditional weighting. Due to the limitation that the same uv-weight is applied to both PSF and the image, the result will only be correct if the data gridder is using the same number of oversampling planes as the default spheroidal function gridder (i.e. 128). If this is not the case, consider usingupdatedirectionoption instead (if the data contain just one pointing it is essentially doing normal cleaning, but it always creates PSF using the default spheroidal function gridder) with the same subshape and the full size.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter18"
                },
                {
                    "name": "Cimager.calibrate",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, calibration of visibilities will be performed before imaging. SeeAccess to calibrator solutionsfor details on calibration parameters used during this application process.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter19"
                },
                {
                    "name": "Cimager.calibrate.scalenoise",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the noise estimate will be scaled in accordance with the applied calibrator factor to achieve proper weighting.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter20"
                },
                {
                    "name": "Cimager.calibrate.allowflag",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, corresponding visibilities are flagged if the inversion of Mueller matrix fails. Otherwise, an exception is thrown should the matrix inversion fail",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter21"
                },
                {
                    "name": "Cimager.calibrate.ignorebeam",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the calibration solution corresponding to beam 0 will be applied to all beams",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter22"
                },
                {
                    "name": "Cimager.calibrate.interpolatetime",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, do linear interpolation of gain solutions",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter23"
                },
                {
                    "name": "Cimager.gainsfile",
                    "type": "String",
                    "options": [],
                    "defaultValue": " ",
                    "description": "This is an obsolete parameter, which is still supported for backwards compatibility defining the file with antenna gains (a parset format, keywords look likegain.g11.0, where g11 or g22 in the middle correspond to different polarisations and the trailing number is the zero-based antenna number. The default value (empty string) means no gain correction is performed. The gain file format is the same as produced by Ccalibrator.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter24"
                },
                {
                    "name": "Cimager.restore",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the image will be restored (by convolving with the given 2D gaussian). This is an additional step to normal imaging, which, by default, ends with just a model image. The restored image is written into a separate image file (with the.restoresuffix). The convolution is done with the restore solver (see alsoSolvers) which reuses the same parameters used to setup the image solver (and therefore ensuring the same preconditioning is done). The only additional parameter of the restore solver is the shape of the gaussian representing clean beam (or flag to determine the shape). It is given by therestore.beamparameter, which must be present ifrestoreis set to True",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter25"
                },
                {
                    "name": "Cimager.residuals",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true write out the residual image. (deprecated)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter26"
                },
                {
                    "name": "Cimager.restore.beam",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Either a single wordfitor a quantity string describing the shape of the clean beam (to convolve the model image with). If quantity is given it must have exactly 3 elements, e.g. [30arcsec, 10arcsec, 40deg]. Otherwise an exception is thrown. This parameter is only used ifrestoreis set to True. If restore.beam=fit, the code will fit a 2D gaussian to the PSF image (first encountered if multiple images are solved for) and use the results of this fit.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter27"
                },
                {
                    "name": "Cimager.restore.beam.cutoff",
                    "type": "Float",
                    "options": [],
                    "defaultValue": 0.5,
                    "description": "Cutoff for the support search prior to beam fitting, as a fraction of the PSF peak. This parameter is only used ifrestore.beam=fit. The code does fitting on a limited support (to speed things up and to avoid sidelobes influencing the fit). The extent of this support is controlled by this parameter representing the level of the PSF which should be included into support. This value should be above the first sidelobe level for meaningful results.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter28"
                },
                {
                    "name": "Cimager.restore.beam.maxsupport",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 101,
                    "description": "Maximum support size for beam fitting - this avoids spending excessive CPU time trying to fit very poor beams",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter29"
                },
                {
                    "name": "Cimager.restore.preconditioner.xxx",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Specify an additional preconditioner to be used when restoring. This will result in a second set of restored files with the.alt.restoredsuffix. Seepreconditionerbelow. When using multiple restore solvers, one should use therestore.beam=fitoption to allow for different beam shapes.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter30"
                },
                {
                    "name": "Cimager.restore.preconditioner .suffix",
                    "type": "String",
                    "options": [],
                    "defaultValue": "alt",
                    "description": "Change the suffix for the alternative preconditioner products",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter31"
                },
                {
                    "name": "Cimager.restore.equalise",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the final residual is multiplied by the square root of the truncated normalised weight (i.e. additional weight described by Sault et al. (1996), which gives a flat noise). Note, that the source flux densities are likely to have position-dependent errors if this option is used because not all flux is recovered during the clean process. However, the images look aesthetically pleasing with this option.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter32"
                },
                {
                    "name": "Cimager.restore.updateresiduals",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "true",
                    "description": "The residual image written out by the restore solver can be updated using the latest model. This is now the default behviour. Note the majorcycle outputs do not pass through the restore solver so are not updated so therefore correspond to the residuals at the beginning of the last minor cycle.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter33"
                },
                {
                    "name": "Cimager.Images.xxx",
                    "type": "various",
                    "options": [],
                    "defaultValue": "",
                    "description": "A number of parameters given in this form define the images one wants to produce (shapes, positions, etc). The details are given in a separate section (see below)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter34"
                },
                {
                    "name": "Cimager.nUVWMachines",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "number of beams",
                    "description": "Size of uvw-machines cache. uvw-machines are used to convert uvw from a given phase centre to a common tangent point. To reduce the cost to set the machine up (calculation of the transformation matrix), a number of these machines is cached. The key to the cache is a pair of two directions: the current phase centre and the tangent centre. If the required pair is within the tolerances of that used to setup one of the machines in the cache, this machine is reused. If none of the cache items matches the least accessed one is replaced by the new machine which is set up with the new pair of directions. The code would work faster if this parameter is set to the number of phase centres encountered during imaging. In non-faceting case, the optimal setting would be the number of synthetic beams times the number of fields. For faceting (btw, the performance gain is quite significant in this case), it should be further multiplied by the number of facets. Direction tolerances are given as a separate parameter.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter35"
                },
                {
                    "name": "Cimager.uvwMachineDirTolerance",
                    "type": "String",
                    "options": [],
                    "defaultValue": "1e-6rad",
                    "description": "Direction tolerance for the management of the uvw-machine cache (seenUVWMachinesfor details). The value should be an angular quantity. The default value corresponds roughly to 0.2 arcsec and seems sufficient for all practical applications within the scope of ASKAPsoft.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter36"
                },
                {
                    "name": "Cimager.gridder",
                    "type": "String",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Name of the gridder, further parameters are given bygridder.something. SeeGriddersfor details.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter37"
                },
                {
                    "name": "Cimager.includeflagged",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "true",
                    "description": "By default the flags are ignored when scanning through the data for ranges of frequencies, uvw values and other parameters because this is faster. Set to false to exclude flagged data and make the advice more accurate. Flagged data are always excluded during imaging.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter38"
                },
                {
                    "name": "Cimager.rankstoringcf",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 1,
                    "description": "In the parallel mode, only this rank will attempt to export convolution functions if this operation is requested (seetablenameoption in theGridders) This option is ignored in the serial mode.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter39"
                },
                {
                    "name": "Cimager.visweights",
                    "type": "String",
                    "options": [],
                    "defaultValue": "MFS if anynterms>1,   otherwise",
                    "description": "If this parameter is set to  MFS gridders are setup to grid/degrid with the weight required for multi-frequency synthesis. At the moment, this parameter is decoupled from the image setup, which has to be done separately in a consistent way to use MSMFS (ntermsshould be set to something greater than 1).",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter40"
                },
                {
                    "name": "Cimager.visweights.MFS.reffreq",
                    "type": "Float",
                    "options": [],
                    "defaultValue": "ave freq (seefrequencyabove)",
                    "description": "Reference frequency in Hz for MFS processing (see above)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter41"
                },
                {
                    "name": "Cimager.solver",
                    "type": "String",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Name of the solver, further parameters are given bysolver.something. SeeSolversfor details",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter42"
                },
                {
                    "name": "Cimager.thershold.xxx",
                    "type": "various",
                    "options": [],
                    "defaultValue": "",
                    "description": "Thresholds for the minor and major cycle (cycle termination criterion), seeSolversfor details.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter43"
                },
                {
                    "name": "Cimager.preconditioner.xxx",
                    "type": "various",
                    "options": [],
                    "defaultValue": "",
                    "description": "Preconditioners applied to the normal equations before the solver is called, seeSolversfor details.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter44"
                },
                {
                    "name": "Cimager.ncycles",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "0",
                    "description": "Number of major cycles (and iterations over the dataset)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter45"
                },
                {
                    "name": "Cimager.sensitivityimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, an image with theoretical sensitivity will be created in addition to weights image (deprecated)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter46"
                },
                {
                    "name": "Cimager.sensitivityimage.cutoff",
                    "type": "Float",
                    "options": [],
                    "defaultValue": 0.01,
                    "description": "Desired cutoff in the sensitivity image",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter47"
                },
                {
                    "name": "Cimager.freqframe",
                    "type": "String",
                    "options": [],
                    "defaultValue": "topo",
                    "description": "Frequency frame to work in (the frame is converted when the dataset is read). Either lsrk or topo is supported.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter48"
                },
                {
                    "name": "Cimager.channeltolerance",
                    "type": "Float",
                    "options": [],
                    "defaultValue": 0,
                    "description": "Whether to use the floating-point tolerance in comparing frequencies from different datasets, allowing for small differences in the frequency settings. Default is to require the frequencies to match exactly.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter49"
                },
                {
                    "name": "Cimager.calcstats",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, calculate the image statistics and write it to the image table.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter50"
                },
                {
                    "name": "Cimager.clearcache",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, clear the table cache for the DATA and FLAG after processing each channel. This reduces memory use for the spectral line case",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter52"
                },
                {
                    "name": "Cimager.clearcache",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, clear the table cache for the DATA and FLAG after processing each channel. This reduces memory use for the spectral line case",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter52"
                },
                {
                    "name": "Cimager.Feed",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select a subset of the data corresponding to a particular feed (should be called synthetic beam in the ASKAP terminology). If defined, only data corresponding to the given beam will be read from the dataset and processed by eitherCimagerorCcalibrator. The value is 0-based number of the beam.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter53"
                },
                {
                    "name": "Cimager.Beam",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Synonym of Feed. Should probably be used instead to avoid confusion. Note, only one of the two recognised keywords is allowed to be present in the same parset.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter54"
                },
                {
                    "name": "Cimager.Antenna",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select all baselines to the given antenna, irrespective of the order.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter55"
                },
                {
                    "name": "Cimager.Baseline",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select a subset of the data corresponding to a particular baseline. If defined, only data from the given baseline will be read from the dataset and processed by eitherCimagerorCcalibrator. The vector should have exactly two elements, which are treated as zero-based antenna indices.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter56"
                },
                {
                    "name": "Cimager.Channels",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select a subset of spectral channels. If defined, only a slice of the visibility cube is passed to eitherCimagerorCcalibrator.Currently should always be a 2-element vector with the number of channels requested and the first channel (0-based) of the slice. The optional 3rd element of the vector is intended for on-the-fly averaging in spectral channels (it is a number of adjacent spectral channels to average). It is not yet implemented by the accessor, although understood at the parset level.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter57"
                },
                {
                    "name": "Cimager.SpectralWindow",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select data from a given spectral window only. If defined, only data corresponding to this spectral window will be read. The value is 0-based index of the spectral window",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter58"
                },
                {
                    "name": "Cimager.Polarisations",
                    "type": "String",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Intended for accessor-based selection of polarisation. Not yet implemented.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter59"
                },
                {
                    "name": "Cimager.TimeRange",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select a subset of data based on time. If defined, only data within the given timerange are read. Time is defined in UTC seconds since MJD 0.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter60"
                },
                {
                    "name": "Cimager.Tiles",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select a subset of data based on tile number. This is only allowed for data stored in tables using tiling. Either specify a 2 elements vector giving the number of tiles and the starting tile ( %w type substutions are performed) or the single string  auto, which will distribute tiles over ranks automatically. The casacore commandshowtableinfocan be used to check the tiling of a dataset.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter61"
                },
                {
                    "name": "Cimager.CorrelationType",
                    "type": "String",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select certain type of correlations. Allowed values are:auto,crossandall. Defining this parameter allows to select, e.g. just cross-correlations.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter62"
                },
                {
                    "name": "Cimager.ScanNumber",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select a single scan number. If defined, only data corresponding to the given scan number will be read from the dataset. The value is 0-based.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter63"
                },
                {
                    "name": "Cimager.MinUV",
                    "type": "Float",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select data based on the uv-distance (in metres). Only visibility points corresponding to uv-distance greater than the given value (defined in metres) are read from the measurement set. Note, the selection is done without taking frequency information into account.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter64"
                },
                {
                    "name": "Cimager.MinNonZeroUV",
                    "type": "Float",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select data based on the uv-distance (in metres). Only visibility points corresponding to uv-distance grater than the given value (defined in metres) or zero vectors are read from the measurement set. Special treatment of samples with exactly zero u,v and w is the difference from theMinUVoption (i.e. selection criterion is only applied if uvw vector has non-zero length).",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter65"
                },
                {
                    "name": "Cimager.MaxUV",
                    "type": "Float",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Select data based on the uv-distance (in metres). Only visibility points corresponding to uv-distance smaller than the given value (defined in metres) are read from the measurement set. Note, the selection is done without taking frequency information into account.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter66"
                },
                {
                    "name": "Cimager.Images.reuse",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the model images will be read from the disk (from the image files they are normally written to according to the parset) before the first major cycle. If false (the default), a new empty model image will be initialised for every image solved for. Setting this parameter to true allows to continue cleaning the same image if more major cycles are required after inspection of the image. Note, there is little cross check that the image given as an input is actually a result of the previous run of cimager with the same Image parameters. So the user is responsible to ensure that the projection, shape, etc matches.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter67"
                },
                {
                    "name": "Cimager.Images.shape",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "1.7 * pb FWHM (~1st null) + 2 * max(pb offset)pb FWHM = 1.2*lambda/12",
                    "description": "Optional parameter to define the default shape for all images. If an individualshapeparameter is specified separately for one of the images, this default value of the shape is overridden. Individualshapeparameters (see below) must be given for all images if this parameter is not defined. Must be a two-element vector.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter68"
                },
                {
                    "name": "Cimager.Images.cellsize",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "1/max(u,v) / 6 rad",
                    "description": "Optional parameter to define the default pixel (or cell) size for all images. If an individualcellsizeparameter is specified separately for one of the images, this default value is overridden. Individualcellsizeparameters (see below) must be given for all images, if this parameter is omitted. If defined, a 2-element quantity string vector is expected, e.g. [6.0arcsec, 6.0arcsec].",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter69"
                },
                {
                    "name": "Cimager.Images.griddingcellsize",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Optional parameter to define the pixel size used during gridding, merging and preconditioning. Before cleaning or output, images are oversampled to the desiredcellsize. If defined, a 2-element quantity string vector is expected, e.g. [6.0arcsec, 6.0arcsec].",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter70"
                },
                {
                    "name": "Cimager.Images.nyquistgridding",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Optional parameter to determine thegriddingcellsizeparameter automatically using uvw metadata. Ifgriddingcellsizeis also defined, that value will be used. Setting nyquistgridding=false will not disablegriddingcellsizeif it is defined.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter71"
                },
                {
                    "name": "Cimager.Images.writeAtMajorCycle",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the current images are written to disk after each major cycle (.cyclesuffix is added to the name to reflect which major cycle the image corresponds to). By default, the images are only written afterncyclesmajor cycles are completed.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter72"
                },
                {
                    "name": "Cimager.Images.Names",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "List of image names which this imager will produce. If more than one image is given, a superposition is assumed (i.e. visibilities are fitted with a combined effect of two images; two measurement equations are simply added). Parameters of each image defined in this list must be given in the same parset usingImageName.somethingkeywords (with usual prefix). Note, all image names must start with wordimage(this is how parameters representing images are distinguished from other type of free parameters in ASKAPsoft), otherwise an exception is thrown. Example of valid names are:image.10uJy,image,imagecenaIn spectral mode only the first name is used.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter73"
                },
                {
                    "name": "Cimager.Images.ImageName.nchan",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 1,
                    "description": "Number of spectral planes in the image cube to produce. Set it to 1 if just a 2D image is required",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter74"
                },
                {
                    "name": "Cimager.Images.ImageName.frequency",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "[min freq,max freq] if nchan>1, [ave freq,ave freq] if nchan=1ave freq = (min+max)/2Note: these are the min and max frequencies being processed, which may be a subset of the full frequency range.",
                    "description": "Frequencies in Hz of the first and the last spectral channels to produce in the cube. The range is binned intonchanchannels and the data are gridded (with MFS) into a nearest image channel (therefore, the number of image channels given by thenchankeyword may be less than the number of spectral channels in the data. Ifnchanis 1 all data are MFS\u2019ed into a single image (however the image will have a degenerate spectral axis with the frequency defined by the average of the first and the last element of this vector; it is practical to make both elements identical, whennchanis 1). The vector should contain 2 elements at all times, otherwise an exception is thrown",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter75"
                },
                {
                    "name": "Cimager.Images.ImageName.direction",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "phase centre of the visibilities",
                    "description": "Direction to the centre of the required image (or tangent point for facets). This vector should contain a 3-element direction quantity containing right ascension, declination and epoch, e.g. [12h30m00.00, -45.00.00.00, J2000]. Note that a casa style of declination delimiters (dots rather than colons) is essential. OnlyJ2000directions are currently supported.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter76"
                },
                {
                    "name": "Cimager.Images.ImageName.tangent",
                    "type": "Array",
                    "options": [],
                    "defaultValue": " ",
                    "description": "Direction to the user-defined tangent point, if different from the centre of the image. This vector should contain a 3-element direction quantity containing right ascension, declination and epoch, e.g. [12h30m00.00, -45.00.00.00, J2000] or be empty (in this case the tangent point will be in the image centre). Note that a casa style of declination delimiters (dots rather than colons) is essential. OnlyJ2000directions are currently supported. This option doesn\u2019t work with faceting.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter77"
                },
                {
                    "name": "Cimager.Images.ImageName.ewprojection",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the image will be set up with the NCP or SCP projection appropriate for East-West arrays (w-term is equivalent to this coordinate transfer for East-West arrays)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter78"
                },
                {
                    "name": "Cimager.Images.ImageName.shape",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Optional parameter if the default shape (without image name prefix) is defined. This value will override the default shape for this particular image. Must be a 2-element vector.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter79"
                },
                {
                    "name": "Cimager.Images.ImageName.cellsize",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "None",
                    "description": "Optional parameter if the default cell size (without image name prefix) is defined. This value will override the default cell size for this particular image. A two-element vector of quantity strings is expected, e.g. [6.0arcsec, 6.0arcsec]",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter80"
                },
                {
                    "name": "Cimager.Images.ImageName.nfacets",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 1,
                    "description": "Number of facets for the given image. If greater than one, the image centre is treated as a tangent point andnfacetsfacets are created for this given image (parameters/output model images will have names like ImageName.facet.x.y, where x and y are 0-based facet indices varying from 0 tonfacet-1).  The facets are merged together into a single image in the restore solver (i.e. it would happen only ifrestoreis true).",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter81"
                },
                {
                    "name": "Cimager.Images.ImageName.polarisation",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "[I]",
                    "description": "Polarisation planes to be produced for the image (should have at least one). Polarisation conversion is done on-the-fly, so the output polarisation frame may differ from that of the dataset. An exception is thrown if there is insufficient information to obtain the requested polarisation (e.g. there are no cross-pols and full stokes cube is requested). Note, ASKAPsoft uses thecorrectdefinition of stokes parameters, i.e.I=XX+YY, which is different from casa and miriad (which imply I=(XX+YY)/2).The code parsing the value of this parameter is quite flexible and allows many ways to define stokes axis, e.g. [ XX YY] or [ XX,YY] or  XX,YY are all acceptable",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter82"
                },
                {
                    "name": "Cimager.Images.ImageName.nterms",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": 1,
                    "description": "Number of Taylor terms for the given image. If greater than one, a given number of Taylor terms is generated for the given image which are named ImageName.taylor.x, where x is the 0-based Taylor order (note, it can be combined with faceting causing the names to be more complex). This name substitution happens behind the scene (as for faceting) and a number of images (representing Taylor terms) is created instead of a single one. This option should be used in conjunction withvisweights(see above) to utilize multi-scale multi-frequency algorithm. Withvisweights=MFSthe code recognizes different Taylor terms (using _taylor.x_ name suffix) and applies the appropriate order-dependent weight.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter83"
                },
                {
                    "name": "Cimager.Images.ImageName.facetstep",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "min(shape(0),shape(1))",
                    "description": "Offset in tangent plane pixels between facet centres (assumed the same for both dimensions).  The default value is the image size, which means no overlap between facets (no overlap on the shortest axis for rectangular images). Overlap may be required to achieve a reasonable dynamic range with faceting (aliasing from the sources located beyond the facet edge). The alternative way to address the same problem is thepaddingoption of the gridder (seeGriddersfor details).",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter84"
                },
                {
                    "name": "Cimager.write.residualimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the residual image(s) if true (replaces residuals parameter)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter85"
                },
                {
                    "name": "Cimager.write.psfrawimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the \u2018raw\u2019 (unnormalised, non-preconditoned) psf if true",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter86"
                },
                {
                    "name": "Cimager.write.psfimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "true",
                    "description": "Write the preconditioned psf if true",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter87"
                },
                {
                    "name": "Cimager.write.weightsimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the weights image(s) if true If both weightsimage and weightslog are false write a header keyword or table",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter88"
                },
                {
                    "name": "Cimager.write.modelimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the model image(s) if true. Default is true if restore is false or writeAtMajorCycle is true",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter89"
                },
                {
                    "name": "Cimager.write.maskimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the mask image(s) if true   (cont. only)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter90"
                },
                {
                    "name": "Cimager.write.scalemask",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the scale mask image(s) if true (only available for deep continuum clean)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter91"
                },
                {
                    "name": "Cimager.write.sensitivityimage",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the sensitivity image(s) if true.(continuum only)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter92"
                },
                {
                    "name": "Cimager.write.firstrestore",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the image(s) produced in the first restore iteration if true (continuum only)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter93"
                },
                {
                    "name": "Cimager.write.grids",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the complex uv grids (gridded vis, psf, and pcf) if true (spectral imaging only)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter94"
                },
                {
                    "name": "Cimager.write.grids.uvcoord",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Label FITS output grid with UV coordinates instead of (incorrect) RA/Dec coordinates. UV Grids in casa format are always labeled UV. FITS readers (wcslib) don\u2019t support UV well.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter95"
                },
                {
                    "name": "Cimager.write.grids.fft",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the FFT of the grids, real part only. These are the dirty image, dirty psf and pcf Coordinates will be RA/Dec.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter96"
                },
                {
                    "name": "Cimager.write.weightslog",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write the weights to a log file. Alternative to weights images if they are constant.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter97"
                },
                {
                    "name": "Cimager.write.beamlog",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "true",
                    "description": "Write the channel dependent restoring beam sizes to a log file. If false write them to the image as an attached table.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter98"
                },
                {
                    "name": "Cimager.write.multiple",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "Write out all the images selected above for multiple image parameters. By default, just write the outputs for the first image.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter99"
                },
                {
                    "name": "Cimager.write.multiplemodels",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "true",
                    "description": "Write out all the model images, handy if you do not want all the outputs, but need the models for use in e.g., ccontsubtract",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter100"
                },
                {
                    "name": "Cimager.header.<keyword>",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "[,,STRING]",
                    "description": "Header keyword to write to the image header. Replace <keyword> with up to 8 character name of the keyword. Second string is the keyword description or comment (default no comment). Third string is the optional type (INT,DOUBLE, or STRING) with STRING the default.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter101"
                },
                {
                    "name": "Cimager.uvweight",
                    "type": "Array",
                    "options": [],
                    "defaultValue": "[]",
                    "description": "Main parameter enabling computation and application of traditional weights. If the list is not empty, sample density is computed (in a distributed fashion if applicable) and passed to the effects (procedures) in the order they are listed in this parameter. The result is used as the weight grid for all subsequent imaging. Same weights apply to all polarisation products and Taylor terms. Currently, the following effects (weight calculators) are supported:ConjugatesAdderFFT,RobustandReciprocal. The first one ensures conjugate symmetry of the sample density via a relatively brute force approach using the FFT. This is necessary for robust weighting to work correctly with its current implementation. The second option (Robust) performs calculation of the robust weights. And the last option,Reciprocal, exists largely for experiments. It simply computes an inverse for every weight value above the threshold. All weight values below the threshold are replaced by 0.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter102"
                },
                {
                    "name": "Cimager.uvweight.robustness",
                    "type": "Float",
                    "options": [],
                    "defaultValue": "None",
                    "description": "The value of robustness, only used if there isRobustamong the list of effects given in theuvweightparameter. The value is supposed to be between -2. and 2., inclusive",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter103"
                },
                {
                    "name": "Cimager.uvweight.recipthreshold",
                    "type": "Float",
                    "options": [],
                    "defaultValue": "1e-5",
                    "description": "Threshold forReciprocalweight calculator",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter104"
                },
                {
                    "name": "Cimager.uvweight.perbeam",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "false",
                    "description": "If true, the weight is accumulated and applied per beam. Otherwise, the beam index is ignored",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter105"
                },
                {
                    "name": "Cimager.uvweight.maxbeams",
                    "type": "Integer",
                    "options": [],
                    "defaultValue": "36",
                    "description": "This parameter is only used ifperbeamparameter is true and represents the maximum number of beams which can be encountered in the measurement set (beam indices are expected to range from 0 to (maxbeams - 1), inclusive)",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter106"
                },
                {
                    "name": "Cimager.uvweight.alldatawt",
                    "type": "Boolean",
                    "options": [],
                    "defaultValue": "value ofperbeam",
                    "description": "If true, all samples are included to populate the initial sample density grid. Otherwise, only data from a representative beam and field are accepted. This option is equivalent toalldatapsfin the case of preconditioning, and may be handy if the measurement set contains interleaved pointings or multiple beams.",
                    "keyAttribute": false,
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "id": "parameter107"
                }
            ],
            "inputAppFields": [],
            "outputAppFields": [],
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "inputApplicationKey": null,
            "inputApplicationDescription": "",
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "outputApplicationKey": null,
            "outputApplicationDescription": ""
        }
    ],
    "linkDataArray": []
}
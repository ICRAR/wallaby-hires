{
    "linkDataArray": [],
    "modelData": {
        "commitHash": "",
        "detailedDescription": "",
        "downloadUrl": "",
        "eagleCommitHash": "a1d68d87110d9cf6614ceb5e9f6b807ffad4498f",
        "eagleVersion": "v6.2.0:html-graph-renderer",
        "filePath": "cImager.palette",
        "fileType": "Palette",
        "lastModifiedDatetime": 0,
        "lastModifiedEmail": "",
        "lastModifiedName": "",
        "numLGNodes": 1,
        "readonly": false,
        "repo": "",
        "repoBranch": "",
        "repoService": "Unknown",
        "repositoryUrl": "",
        "schemaVersion": "Unknown",
        "shortDescription": "",
        "signature": ""
    },
    "nodeDataArray": [
        {
            "category": "ParameterSet",
            "categoryType": "Data",
            "commitHash": "b11f970",
            "dataHash": "057c6a8ea53a5d04ce07c2e26ef25cfca59504053407289c5309f81cc44556fc",
            "description": "A set of parameters, which can be set and modified in EAGLE and thus is part of the graph. Multiple serialisation formats are available.",
            "fields": [
                {
                    "defaultValue": "5",
                    "description": "Estimated size of the data contained in this node",
                    "id": "9868d92f-b5a0-48a1-808d-61fea5970331",
                    "keyAttribute": false,
                    "name": "data_volume",
                    "options": [],
                    "parameterType": "ConstraintParameter",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "Float",
                    "usage": "NoPort",
                    "value": 5
                },
                {
                    "defaultValue": "False",
                    "description": "Is this node the end of a group?",
                    "id": "a37d4785-f941-4a3c-94fc-4d5dbf51dae1",
                    "keyAttribute": false,
                    "name": "group_end",
                    "options": [],
                    "parameterType": "ComponentParameter",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "Boolean",
                    "usage": "NoPort",
                    "value": false
                },
                {
                    "defaultValue": "YANDA",
                    "description": "Serialisation method.",
                    "id": "891df2ae-b058-4de4-9382-0f6c1e7a4aec",
                    "keyAttribute": false,
                    "name": "mode",
                    "options": [
                        "YANDA",
                        "ini",
                        "yaml",
                        "json",
                        "toml",
                        "pickle"
                    ],
                    "parameterType": "ComponentParameter",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "Select",
                    "usage": "NoPort",
                    "value": "YANDA"
                },
                {
                    "defaultValue": "",
                    "description": "Additional configuration information to be mixed in with the initial data",
                    "id": "c4fc516c-1d25-4d13-a764-93d1a2a21d57",
                    "keyAttribute": false,
                    "name": "config_data",
                    "options": [],
                    "parameterType": "ComponentParameter",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "String",
                    "usage": "NoPort",
                    "value": ""
                },
                {
                    "defaultValue": "dlg.data.drops.parset_drop.ParameterSetDROP",
                    "description": "Drop class",
                    "id": "bbb7260a-f5c4-447a-a6fd-ff06bbd83171",
                    "keyAttribute": false,
                    "name": "dropclass",
                    "options": [],
                    "parameterType": "ComponentParameter",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "String",
                    "usage": "NoPort",
                    "value": "dlg.data.drops.parset_drop.ParameterSetDROP"
                },
                {
                    "defaultValue": "False",
                    "description": "Specifies whether this data component streams input and output data",
                    "id": "c792ed4c-58dd-4a2b-8d35-6d7852fa661a",
                    "keyAttribute": false,
                    "name": "streaming",
                    "options": [],
                    "parameterType": "ComponentParameter",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "Boolean",
                    "usage": "NoPort",
                    "value": false
                },
                {
                    "defaultValue": "False",
                    "description": "Specifies whether this data component contains data that should not be deleted after execution",
                    "id": "5aca3239-f079-44e8-83d5-7589d3a8abbf",
                    "keyAttribute": false,
                    "name": "persist",
                    "options": [],
                    "parameterType": "ComponentParameter",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "Boolean",
                    "usage": "NoPort",
                    "value": false
                },
                {
                    "defaultValue": "",
                    "description": "The output configuration file",
                    "id": "be4158b4-a2ff-4c07-9f33-e7f183829a2d",
                    "keyAttribute": false,
                    "name": "Config",
                    "options": [],
                    "parameterType": "ApplicationArgument",
                    "positional": false,
                    "precious": false,
                    "readonly": false,
                    "type": "Object.File",
                    "usage": "OutputPort",
                    "value": ""
                },
		{
		"name": "Cimager.dataset",
		"type": "Array",
		"options": [],
		"defaultValue": null,
		"description": "Measurement set file name to read from. Usual substitution rules apply if the parameter is a single string. If the parameter is given as a vector of strings all measurement sets given by this vector are effectively concatenated together on-the-fly in the serial case. In the parallel case, the size of the vector is required to be either 1 or the number of nodes - 1, and therefore there is one measurement set per worker node.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter57"
	},
	{
		"name": "Cimager.Images.Names",
		"type": "Array",
		"options": [],
		"defaultValue": null,
		"description": "List of image names which this imager will produce. If more than one image is given, a superposition is assumed (i.e. visibilities are fitted with a combined effect of two images; two measurement equations are simply added). Parameters of each image defined in this list must be given in the same parset using ImageName.something keywords (with usual prefix). Note, all image names must start with word image (this is how parameters representing images are distinguished from other type of free parameters in ASKAPsoft), otherwise an exception is thrown. Example of valid names are: image.10uJy, image, imagecena.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter58"
	},
	{
		"name": "Cimager.Images.direction",
		"type": "Array",
		"options": [],
		"defaultValue": null,
		"description": "Direction to the centre of the required image (or tangent point for facets). This vector should contain a 3-element direction quantity containing right ascension, declination and epoch, e.g. [12h30m00.00, -45.00.00.00, J2000]. Note that a casa style of declination delimiters (dots rather than colons) is essential. Only J2000 directions are currently supported.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter59"
	},
	{
		"name": "Cimager.imagetype",
		"type": "Select",
		"options": ["fits","casa"],
		"defaultValue": "casa",
		"description": "Type of the image handler (determines the format of the images, both which are written to or read from the disk). Either fits or casa can be requested.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter1"
	},
	{
		"name": "Cimager.Images.shape",
		"type": "Array",
		"options": [],
		"defaultValue": [384, 384],
		"description": "Optional parameter to define the default shape for all images. If an individualshapeparameter is specified separately for one of the images, this default value of the shape is overridden. Individualshapeparameters (see below) must be given for all images if this parameter is not defined. Must be a two-element vector. 1.7 * pb FWHM (~1st null) + 2 * max(pb offset)pb FWHM = 1.2*lambda/12",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter2"
	},
	{
		"name": "Cimager.Images.cellsize",
		"type": "Array",
		"options": [],
		"defaultValue": ["2arcsec", "2arcsec"],
		"description": "Optional parameter to define the default pixel (or cell) size for all images. If an individual cell size parameter is specified separately for one of the images, this default value is overridden. Individual cell size parameters (see below) must be given for all images, if this parameter is omitted. If defined, a 2-element quantity string vector is expected, e.g. [6.0arcsec, 6.0arcsec]. (1/max(u,v) / 6 rad)",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter3"
	},
	{
		"name": "Cimager.Images.writeAtMajorCycle",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true, the current images are written to disk after each major cycle (.cyclesuffix is added to the name to reflect which major cycle the image corresponds to). By default, the images are only written afterncyclesmajor cycles are completed.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter4"
	},
	{
		"name": "Cimager.freqframe",
		"type": "String",
		"options": [],
		"defaultValue": "topo",
		"description": "Frequency frame to work in (the frame is converted when the dataset is read). Either lsrk or topo is supported.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter5"
	},
	{
		"name": "Cimager.nUVWMachines",
		"type": "Integer",
		"options": [],
		"defaultValue": 0,
		"description": "Size of uvw-machines cache. uvw-machines are used to convert uvw from a given phase centre to a common tangent point. To reduce the cost to set the machine up (calculation of the transformation matrix), a number of these machines is cached. The key to the cache is a pair of two directions: the current phase centre and the tangent centre. If the required pair is within the tolerances of that used to setup one of the machines in the cache, this machine is reused. If none of the cache items matches the least accessed one is replaced by the new machine which is set up with the new pair of directions. The code would work faster if this parameter is set to the number of phase centres encountered during imaging. In non-faceting case, the optimal setting would be the number of synthetic beams times the number of fields. For faceting (btw, the performance gain is quite significant in this case), it should be further multiplied by the number of facets. Direction tolerances are given as a separate parameter.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter6"
	},
	{
		"name": "Cimager.ncycles",
		"type": "Integer",
		"options": [],
		"defaultValue": 0,
		"description": "Number of major cycles (and iterations over the dataset)",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter7"
	},
	{
		"name": "Cimager.gridder.snapshotimaging",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true, snapshot imaging is done. In this mode, a w=au+bv plane is fitted to baseline coordinates and the effective w-term becomes a difference between the actual w-term and the fitted plane. The subtraction of such a plane is equivalent to the coordinate distortion. Therefore, every time the fit is updated, the current dirty and weight images are regridded into a stable frame. How often the new fit is done depends on the w-tolerance parameter, which must be given if the snap-shot imaging is used.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter8"
	},
	{
		"name": "Cimager.gridder.snapshotimaging.wtolerance",
		"type": "Float",
		"options": [],
		"defaultValue": null,
		"description": "Required tolerance on residual w-term for snap-shot imaging (in wavelengths).This parameter must be given if the snap-shot imaging is used. An exception is thrown if the antenna layout is significantly non-coplanar and the required tolerance cannot be achieved by plane fitting.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter9"
	},
	{
		"name": "Cimager.gridder.snapshotimaging.longtrack",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true the best fit W plane for the snapshot is predicted by advancing the uvw in time and finding that plane which minimises the deviation in the future. Some minutes from the current time. This allows the max deviation to remain within tolerance for almost twice as long as the default scheme. This can have a substantial effect on processing time for long tracks. It should be a factor of two faster.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter10"
	},
	{
		"name": "Cimager.gridder.snapshotimaging.clipping",
		"type": "Float",
		"options": [],
		"defaultValue": 0.0,
		"description": "Optional clipping to avoid edge effects during image reprojection. This parameter represents the fraction of the image size (on each directional axis) which is zeroed (equally from both sides). It should be a non-negative number less than 1. Set it to 0 (default) to avoid any clipping. Applies to all images (image.*, residual.*, weights.*, etc.).",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter11"
	},
	{
		"name": "Cimager.gridder",
		"type": "String",
		"options": [
			"Box",
			"SphFunc",
			"WProject",
			"MPIWProject",
			"WStack",
			"AWProject",
			"AProjectWStack"
		],
		"defaultValue": null,
		"description": "Name of the gridder, further parameters are given bygridder.something. SeeGriddersfor details.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter12"
	},
	{
		"name": "Cimager.gridder.WProject.wmax",
		"type": "Float",
		"options": [],
		"defaultValue": "largest w value relative to the tangent of the first image (or the largest residual w when using snapshots)",
		"description": "Largest allowed absolute value of the w term in wavelengths.  An exception will be thrown if the dataset contains w-term exceeding this value (W scaling error: recommend allowing larger range of w).",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter13"
	},
	{
		"name": "Cimager.gridder.WProject.nwplanes",
		"type": "Integer",
		"options": [],
		"defaultValue": 65,
		"description": "Number of w-planes. Number of w planes must be an odd positive number. For the WProject gridder this scales up the number of convolution functions calculated. For the WStack gridder this is the number of grids maintained. You may (and will) run out of memory for a large number of w planes, especially for the stacking algorithm",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter14"
	},
	{
		"name": "Cimager.gridder.WProject.oversample",
		"type": "Integer",
		"options": [],
		"defaultValue": 8,
		"description": "Oversampling factor. Convolution functions will be computed for this number of pixels per uv-cell.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter15"
	},
	{
		"name": "Cimager.gridder.WProject.maxsupport",
		"type": "Integer",
		"options": [],
		"defaultValue": 256,
		"description": "The largest allowed support size in pixels. The grid used to compute the convolution function (before the support is searched and the appropriate inner part of the grid is extracted) is initialised to have the size equal to the smallest of maxsupport and the image size. WProject uses maxsupport x maxsupport grid at the moment regardless of the image size.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter16"
	},
	{
		"name": "Cimager.gridder.WProject.variablesupport",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true, the support will be searched separately for each convolution function. This can speed things up considerably, unless costs to search the support dominates. It was also found that when variable support is used, the algorithm is more sensitive to cutoff value. Too high cutoff value has a significant impact on the image quality if the variable support is used.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter17"
	},
	{
		"name": "Cimager.gridder.WProject.offsetsupport",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true, an offset of the convolution function will be treated separately (the support will be defined by size and offset, which can be non-zero in general). This option reduces the memory footprint and speeds up greeting. It can only be used in conjunction withvariablesupport=true",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter18"
	},
	{
		"name": "Cimager.gridder.WProject.sharecf",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true, use a (static) cache for the convolution functions in the WProject gridder. This saves both time and memory, especially for large images and spectral line cubes. Tests show no significant changes in continuum imaging but small differences in spectral cubes, it is not clear yet if these are a problem. Feedback welcome",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter19"
	},
	{
		"name": "Cimager.solver",
		"type": "String",
		"options": ["Clean","Dirty"],
		"defaultValue": null,
		"description": "Name of the solver, further parameters are given bysolver.something. See Solvers for details. Selection of solver. Specify either “Clean” or “Dirty.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter20"
	},
	{
		"name": "Cimager.solver.Clean.algorithm",
		"type": "String",
		"options": [],
		"defaultValue": "BasisfunctionMFS",
		"description": "Valid choices are MultiScale, Basisfunction, Hogbom, MultiScaleMFS and BasisfunctionMFS. Use Hogbom for a single scale, non-MFS case. For the Clean solver, the casacore\u2019sLatticeCleanerused to do the actual work in non-MSMFS case will be set up withCleanEnums::HOGBOMif algorithm is Hogbom and the single scale of 0 will be used.  For the Basisfunction algorithm, a re-implemented and improved version of the CASA MultiScale algorithm is used. BasisfunctionMFS is the optimised algorithm used for most ASKAP processing",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter21"
	},
	{
		"name": "Cimager.solver.Clean.niter",
		"type": "Integer",
		"options": [],
		"defaultValue": 100,
		"description": "Number of minor cycles.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter22"
	},
	{
		"name": "Cimager.solver.Clean.gain",
		"type": "Float",
		"options": [],
		"defaultValue": 0.7,
		"description": "Loop gain. Fraction of the peak subtracted during one minor cycle.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter23"
	},
	{
		"name": "Cimager.solver.Clean.scales",
		"type": "Array",
		"options": [],
		"defaultValue": [0, 3, 10],
		"description": "Scales to be solved (defined in pixels). Ignored if algorithm=Hogbom.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter24"
	},
	{
		"name": "Cimager.solver.Clean.verbose",
		"type": "String",
		"options": [],
		"defaultValue": "true",
		"description": "True enables lots of output.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter25"
	},
	{
		"name": "Cimager.solver.Clean.tolerance",
		"type": "Float",
		"options": [],
		"defaultValue": 0.1,
		"description": "cutoff value given as a fraction of the largest diagonal element. The linear system describing interferometric measurement is inverted approximately, assuming that the matrix is diagonal, i.e. the right-hand side is divided by the appropriate diagonal element (which is a weight). If diagonal is smaller than this tolerance multiplied by the largest diagonal element, the right-hand side instead is either divided by the largest diagonal element to get the result or the result is set to zero. This is controlled byweightcutoffparameter. For images it means that areas with low weight (i.e. a mosaic edge) are not boosted up. In addition to weight truncation, all pixels with the weight below cutoff are normally masked out. Theweightcutoff.cleanparameter allows to assign mask corresponding to weight truncation. This allows S/N-based cleaning to happen, if the peak of S/N is realised outside the nominal field of view.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter26"
	},
	{
		"name": "Cimager.solver.Clean.weightcutoff",
		"type": "String",
		"options": [],
		"defaultValue": "truncate",
		"description": "Either zero or truncate. This parameter controls what actually happens for values below cutoff defined by thetoleranceparameter. Ifzerois given, the appropriate values are set to zero. Fortruncate, the values are divided by the largest diagonal.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter27"
	},
	{
		"name": "Cimager.solver.Clean.weightcutoff.clean",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "This parameter defines whether the values below cutoff are masked out or not. By default, the are masked out and so S/N-based clean never finds optima among these values. If this parameter is true, the mask is actually sqrt(tolerance), which corresponds to truncation of the diagonal during normalisation. This potentially allows cleaning to happen, if no peak of the S/N is realised among these values.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter28"
	},
	{
		"name": "Cimager.solver.Clean.decoupled",
		"type": "Boolean",
		"options": [],
		"defaultValue": true,
		"description": "Use decoupled residuals - this improves convergence for large scales, allows the use of a lower percentage threshold.minorcycle and seems to have few drawbacks",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter29"
	},
	{
		"name": "Cimager.solver.Clean.psfwidth",
		"type": "Integer",
		"options": [],
		"defaultValue": 0,
		"description": "Sets the width of the psf patch used in the minor cycle. This decreases memory use and run time by approximately the ratio of pixels in the patch to pixels in the image.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter30"
	},
	{
		"name": "Cimager.solver.Clean.logevery",
		"type": "Integer",
		"options": [],
		"defaultValue": 1,
		"description": "How frequently to log progress in the minor cycle. Every nth iteration is reported (ie. iflogevery=100, every 100th iteration is reported), providing the iteration number, the peak residual, the objective function and the total flux.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter31"
	},
	{
		"name": "Cimager.solver.Clean.detectdivergence",
		"type": "Boolean",
		"options": [],
		"defaultValue": true,
		"description": "Check if the deconvolution is diverging - stop the major cycles if the residuals increase by a factor 2",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter32"
	},
	{
		"name": "Cimager.threshold.minorcycle",
		"type": "Array",
		"options": [],
		"defaultValue": "no threshold",
		"description": "If defined, the parameter can be either a single string or a vector of 2 or 3 strings. A number without units, or with a percentage sign, is interpreted as a fractional stopping threshold (with respect to the peak residual). An absolute flux given in Jy or related units is interpreted as an absolute threshold. A string like 5.0sigma will set a threshold relative to the noise in the residuals. You can mix fractional and absolute or noise thresholds, but can\u2019t mix absolute and noise ones. An undefined parameter means no minor cycle thresholding is done. A second absolute flux (or noise) threshold can be used to specify a deep clean threshold. During deep cleaning only pixels already in the model are searched to find new components. Setting the deep clean threshold to 0.5 times the noise level generally leaves very few sidelobes visible. Deep clean and noise based threshold are currently only implemented for the BasisFunctionMFS solver",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter33"
	},
	{
		"name": "Cimager.threshold.majorcycle",
		"type": "String",
		"options": [],
		"defaultValue": "-1Jy",
		"description": "The target peak residual. Use negative value to ensure all requested major cycles are done.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter34"
	},
	{
		"name": "Cimager.preconditioner.Names",
		"type": "Array",
		"options": [],
		"defaultValue": [],
		"description": "List of preconditioners to be applied (in the order they are given in the list). Preconditioners are ASKAPsoft equivalents of visibility weighting (i.e. uniform, robust, natural), which do not require multiple passes over the dataset. Preconditioners can be viewed as operators applied to equation matrix before it is solved. Having the normal matrix as close to the diagonal as possible (a diagonal form is actually assumed during the inversion process) makes the inversion more accurate. By default, no transformation to the normal matrix is done. This is equivalent to the natural weighting. The following preconditioners are currently implemented: Wiener, NormWiener, Robust and GaussianTaper. In addition, the word None is understood as an empty preconditioner which does nothing. Each preconditioner requires a specific set of parameters described in a separate section. These parameters are given after the name of the preconditioner, e.g. preconditioner.Wiener.noisepower (see below)",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter35"
	},
	{
		"name": "Cimager.preconditioner.GaussianTaper",
		"type": "Array",
		"options": [],
		"defaultValue": null,
		"description": "A Gaussian taper is applied to the visibilities. The parameter should be either a single string with the FWHM of a circular gaussian taper, or a vector of three strings for an elliptical taper: the major and minor axis FWHM and the position angle. String values may contain units, e.g.[10arcsec,10arcsec,34deg]. If no units are given, radians are assumed.GaussianTapercurrently conflicts with different uv-cell sizes for different images. An exception is thrown if such a condition exists.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter36"
	},
	{
		"name": "Cimager.preconditioner.GaussianTaper.isPsfSize",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true, try to make the final fitted PSF the size given. This uses the restore.beam.cutoff parameter for the fit. A warning will appear in the log if the target PSF size was not achieved.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter37"
	},
	{
		"name": "Cimager.preconditioner.GaussianTaper.tolerance",
		"type": "Float",
		"options": [],
		"defaultValue": 0.005,
		"description": "Specify the fractional tolerance of the fitted beam size when isPsfSize is true, default is 0.5%",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter38"
	},
	{
		"name": "Cimager.preconditioner.preservecf",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "Use a modified PSF to generate any preconditioner that is derived from the uv sampling function (e.g.WienerandRobust). This option takes a running mean over an approximate nearest-neighbour sampling function with a box width that is proportional to the support size of the gridding kernels. This enables post-gridding density weighting while preserving the gridding convolutions. Note that this is currently only used with theWienerpreconditioner and theWProjectgridder. The default is normally false, but will be true if preconditioning is used.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter39"
	},
	{
		"name": "Cimager.preconditioner.Wiener.robustness",
		"type": "Float",
		"options": [],
		"defaultValue": null,
		"description": "The noise power is derived from the given value of robustness to have roughly the same effect as the analogous parameter in Robust (i.e., -2.0 close to uniform weighting, +2.0 close to natural weighting). Note that the Wiener filter must be specified with eithernoisepowerorrobustness.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter40"
	},
	{
		"name": "Cimager.restore",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "If true, the image will be restored (by convolving with the given 2D gaussian). This is an additional step to normal imaging, which, by default, ends with just a model image. The restored image is written into a separate image file (with the.restoredsuffix). The convolution is done with the restore solver (see alsoSolvers) which by default reuses the same parameters used to setup the image solver. An additional preconditioning step with alternative parameters can be specified usingrestore.preconditioner.xxx, which results in a second set of restored files (with the.alt.restoredsuffix). The only additional parameter of the restore solver is the shape of the gaussian representing clean beam (or flag to determine the shape). It is given by therestore.beamparameter, which must be present ifrestoreis set to True.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter41"
	},
	{
		"name": "Cimager.restore.beam",
		"type": "Array",
		"options": [],
		"defaultValue": null,
		"description": "Either a single wordfitor a quantity string describing the shape of the clean beam (to convolve the model image with). If quantity is given it must have exactly 3 elements, e.g. [30arcsec, 10arcsec, 40deg]. Otherwise an exception is thrown. This parameter is only used ifrestoreis set to True. If restore.beam=fit, the code will fit a 2D gaussian to the PSF image (first encountered if multiple images are solved for) and use the results of this fit.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter42"
	},
	{
		"name": "Cimager.restore.beam.cutoff",
		"type": "Float",
		"options": [],
		"defaultValue": "0.05",
		"description": "Cutoff for the support search prior to beam fitting, as a fraction of the PSF peak. This parameter is only used ifrestore.beam=fit. The code does fitting on a limited support (to speed things up and to avoid sidelobes influencing the fit). The extent of this support is controlled by this parameter representing the level of the PSF which should be included into support. This value should be above the first sidelobe level for meaningful results.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter43"
	},
	{
		"name": "Cimager.MaxUV",
		"type": "Float",
		"options": [],
		"defaultValue": null,
		"description": "Select data based on the uv-distance (in metres). Only visibility points corresponding to uv-distance smaller than the given value (defined in metres) are read from the measurement set. Note, the selection is done without taking frequency information into account.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter44"
	},
	{
		"name": "Cimager.MinUV",
		"type": "Float",
		"options": [],
		"defaultValue": null,
		"description": "Select data based on the uv-distance (in metres). Only visibility points corresponding to uv-distance greater than the given value (defined in metres) are read from the measurement set. Note, the selection is done without taking frequency information into account.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter45"
	}, 
	{
		"name": "Cimager.nchanpercore",
		"type": "Integer",
		"options": [],
		"defaultValue": 1,
		"description": "Number of channels allocated to each worker core.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter46"
	},
	{
		"name": "Cimager.solverpercore",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "Turn on distributed solver (spectral imaging) mode.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter47"
	},
	{
		"name": "Cimager.nwriters",
		"type": "Integer",
		"options": [],
		"defaultValue": 1,
		"description": "The number of output cubes to generate in spectral cube mode.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter48"
	},
	{
		"name": "Cimager.singleoutputfile",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "Single output cube. Useful in the case of multiple writers.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter49"
	}, 
	{
		"name": "Cimager.Channels",
		"type": "Array",
		"options": [],
		"defaultValue": [],
		"description": "Channels to be selected from the measurement set. Syntax is [<number>,<start>]. Defaults to all the channels.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter50"
	},
	{
		"name": "Cimager.usetmpfs",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "Whether to store the visibilities in shared memory.This will give a performance boost at the expense of memory usage. Better used for processing continuum data.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter51"
	},
	{
		"name": "Cimager.tmpfs",
		"type": "String",
		"options": [],
		"defaultValue": "/dev/shm",
		"description": "Location of the shared memory.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter52"
	},
	{
		"name": "Cimager.solver.Clean.solutiontype",
		"type": "Select",
		"options": ["MAXBASE","MAXCHISQ","MAXTERM0"],
		"defaultValue": "MAXBASE",
		"description": "The type of peak finding algorithm to use in the deconvolution. Choices are MAXCHISQ, MAXTERM0, or MAXBASE.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter53"
	},
	{
		"name": "Cimager.restore.beamReference",
		"type": "String",
		"options":[],
		"defaultValue": "mid",
		"description": "The channel to use as the reference for the beam - this channel’s beam is written to the cube header. Values can be an integer indicating the channel number (0-based), or one of ‘mid’, ‘first’, or ‘last’.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter54"
	},
	{
		"name": "Cimager.Images.restFrequency",
		"type": "String",
		"options": [],
		"defaultValue": null,
		"description": "A string indicating the rest frequency to be written to the image cube header (for the restored, model and residual cubes only). The string can be a quantity string (e.g. 1234.567MHz) or the special string ‘HI’, which resovles to 1420.405751786 MHz. If not given, no rest frequency is written to the cubes.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter55"
	}, 
	{
		"name": "Cimager.write.weightsimage",
		"type": "Boolean",
		"options": [],
		"defaultValue": false,
		"description": "Write the weights image(s) if true If both weightsimage and weightslog are false write a header keyword or table.",
		"keyAttribute": false,
		"positional": false,
		"precious": false,
		"readonly": false,
		"id": "parameter56"
	}
            ],
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationKey": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "key": -1,
            "name": "cimager_parset_subset",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationKey": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "paletteDownloadUrl": "https://raw.githubusercontent.com/ICRAR/EAGLE_test_repo/master/daliuge/daliuge-master.palette",
            "repositoryUrl": "https://github.com/ICRAR/daliuge"
        }
    ]
}
